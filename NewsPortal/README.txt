Учебный Django проект - новостной портал


СТРУКТУРА ПРОЕКТА

news_portal
	board_news - приложение, реализующее вывод списка новостей и отдельной новости
	    templatetags - директория с пользовательскими тэгами и фильтрами для html шаблонов
	fpages - приложение, расширяющее возможности админ-панели
	news_portal - директория с настройками всего проекта
	sign - приложение, расширяющее аутентификацию и авторизацию модуля django-allauth
	static - директория с css шаблонами
	templates - директория c HTML шаблонами проекта
	    account - пользовательские шаблоны для аутентификацию и авторизацию модуля django-allauth
	    flatpages - шаблоны приложения board_news
	    socialaccount - пользовательские шаблоны для аутентификации и авторизации через яндекс
	db.sqlite3 - база данных проекта.
venv


ОПИСАНИЕ ПРОЕКТА

Header:
- "Информационный портал" - переход на главную страницу;
- "Поиск по постам" - переход на страницу с возможностью фильтрации постов;
- "Добавить новость" и "Добавить статью" - переход на страницы добавления постов;
- если пользователь авторизован:
    - username пользователя;
    - если пользователь не автор, появляется кнопка "Стать автором";
    - если пользователь автор, появляется подпись "Автор";
    - кнопка "Выйти" из аккаунта;
- если пользователь авторизован, появляется кнопка "Войти".


"Главная страница"
http://127.0.0.1:8000/posts.
На ней выводятся все посты в порядке убывания по даты публикации в формате:
- заголовок;
- категория;
- дата и время публикации;
- первые 20 символов текста;
- ссылка на страницу с постом;
- ссылка на страницу редактирования поста;
- ссылка на страницу удаления поста.
На одной странице отображается до 10 постов.

"Регистрация, идентификация и аутентификация"
Реализованы с помощью библиотеки django-allauth.
Можно зарегистрироваться и аутентифицироваться с помощью яндекса.

"Пост"
Страница с информацией о посте:
- заголовок;
- дата добавления;
- текст поста;
- кнопка "Изменить" пост;
- кнопка "Удалить" пост.

"Добавить новость" и "Добавить статью"
Доступны только авторизованным пользователям и являющимися авторами.
Все поля обязательны.
Один пользователь может добавить не более 3-х "новостей" в день.
Заголовок и текст проходят цензуру с помощью django-фильтра "censor"
(board_news/templatetags/custom_filters.py)
Слова, подлежащие цензуре, находятся в множестве "SET_BAD_WORDS" в файле board_news/templatetags/custom_filters.py.
Определение "плохих" слов происходит по нормальной форме слова (библиотека pymorphy2)

"Изменить новость"
Доступны только авторизованным пользователям и являющимися авторами.

"Удаление новости"
Доступно всем пользователям

"Поиск по постам"
Фильтры:
- название поста содержит;
- имя автора поста содержит;
- пост опубликован после;
- категория поста.
Если применён какой-либо фильтр, появляется кнопка "Сбросить фильтры".
Если в фильтрах выбрана одна или несколько категорий, появляется кнопка "Подписаться".
Если пользователь уже подписан на выбранную категорию, появится кнопка "Отписаться".
На одной странице отображается до 10 отфильтрованных постов.

"Подписка на категорию"
Реализована с помощью celery.
После добавления поста подписчикам на email отправляется письмо с заголовком, кратким содержанием и ссылкой на пост.
Каждую неделю в пятницу в 18:00 подписчикам отправляется список постов, опубликованных на прошедшей неделе.

"Кэширование"
Главная страница загружается в кэш на 60 секунд.
Страница отдельного поста загружается в кэш при первом просмотре и содержится там до тех пор, пока её не изменят.

"Управляющие команды"
Создана управляющая команда "del_post_in_category", которая удаляет все посты в определённой категории.
Категорию нужно указать в параметре при вызове команды.

"Админ-панель"
В админ-панель добавлены все модели приложения "board_news".
Расширены таблицы, добавлены фильтры, поиск по полям и действие поднятия рейтинга для моделей.

"Логирование"
В "settings.py" добавлен словарь с настройками логов.
5 обработчиков:
1) "console" - для всех уровней.
Указываются: время, уровень логирования, сообщение,
путь к источнику сообщения, если уровень от "WARNING", и стэк ошибки, если уровень от "ERROR".
Регистратор - "django".
"DEBUG" - "TRUE".
2) "file_general" - для логов уровня "INFO" и выше.
Указываются: время, уровень логирования, модуль, в котором возникло сообщение и сообщение.
Регистратор - "django".
"DEBUG" - "FALSE".
3) "file_errors" - для логов уровней "ERROR" и "CRITICAL".
Указываются: время, уровень логирования, сообщение, путь к источнику сообщения и стэк ошибки.
Регистраторы: "django.request", "django.server", "django.template", "django.db.backends".
4) "file_security" - для логов связанных с безопасностью.
Указываются: время, уровень логирования, модуль и сообщение.
Регистратор - "django.security".
5) "mail_admins" - для логов уровней "ERROR" и "CRITICAL".
Указываются: время, уровень логирования, сообщение и путь к источнику сообщения.
Регистраторы: "django.request" и "django.server".
"DEBUG" - "FALSE".